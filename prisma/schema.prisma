// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/**
 * 1. 회원가입(일반)
 * - 이름
 * - 닉네임
 * - 이메일
 * - 비밀번호
 * - 비밀번호 확인
 * - 주소(우편번호, 기본주소, 상세주소)
 * - 프로필 이미지
 * 1-1. 회원가입(소셜)
 * - 소셜 로그인(카카오, 구글, 네이버)
 * - 소셜 로그인 시 이메일, 닉네임, 프로필, 이름 가져오기
 * - 소셜 로그인 시 이메일, 닉네임, 프로필, 이름 수정 가능
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String? // 소셜 로그인 시 비밀번호 없음
  name          String
  nickname      String   @unique
  profileImage  String?
  zoneCode      String?
  address       String?
  detailAddress String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  account        Account? // 소셜 계정은 최대 1개
  diaries        Diary[]
  diaryEmpathies DiaryEmpathy[]
  comments       Comment[]
  commentLikes   CommentLike[]
}

// 소셜 로그인 계정
model Account {
  id                String   @id @default(cuid())
  provider          String // 카카오, 구글, 네이버
  providerAccountId String // 제공자별 고유 ID
  accessToken       String?
  refreshToken      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([provider, providerAccountId])
}

// 감정
model Emotion {
  id      String         @id
  label   String
  diaries DiaryEmotion[]
}

model DiaryEmotion {
  diary     Diary   @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId   String
  emotion   Emotion @relation(fields: [emotionId], references: [id], onDelete: Cascade)
  emotionId String

  @@id([diaryId, emotionId])
}

// 일기
model Diary {
  id        String   @id @default(cuid())
  isPrivate Boolean  @default(true)
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  images       DiaryImage[]
  tags         DiaryTag[]
  diaryEmotion DiaryEmotion[]
  empathies    DiaryEmpathy[]
  comments     Comment[]
}

// 일기 이미지
model DiaryImage {
  id      String @id @default(cuid())
  url     String
  order   Int
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId String
}

// 태그
model Tag {
  id      String     @id @default(cuid())
  name    String     @unique
  diaries DiaryTag[]
}

model DiaryTag {
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId String
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String

  @@id([diaryId, tagId])
}

// 일기 공감
model DiaryEmpathy {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId String

  @@unique([userId, diaryId]) // 한 사용자가 같은 일기에 중복 공감 방지
}

// 댓글
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  diary   Diary  @relation(fields: [diaryId], references: [id], onDelete: Cascade)
  diaryId String

  parentId String? // 부모 댓글 ID (대댓글인 경우)
  parent   Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("Replies")

  // 댓글 좋아요
  likes CommentLike[]
}

// 댓글 좋아요
model CommentLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@unique([userId, commentId]) // 사용자가 같은 댓글에 중복 좋아요 방지
}
